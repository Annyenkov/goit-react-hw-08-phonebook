{"version":3,"file":"static/js/962.5b71a9b1.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Form = styled.form`\ndisplay: flex;\nflex-direction: column;\njustify-content: space-evenly;\nborder: 1px solid black;\nwidth: 300px;\nheight: 150px;\n`\nexport const Label = styled.label`\ndisplay: flex;\nmargin-left: 5px;\nflex-direction: column;\n`\n\nexport const Input = styled.input`\nwidth: 150px;\nmargin-top: 5px;\nborder: 1px solid rgb(128, 128, 128, 0.5); \n`\n\nexport const Button = styled.button`\nwidth: 100px;\nmargin-left: 5px;\nbackground-color: white;\nborder-radius: 5px;\nborder: 1px solid rgb(128, 128, 128, 0.5);\ncursor: pointer;\n:hover,\n:focus {\n  background-color: blue;\n  color: white;\n}\n`","export const getContacts = state => state.contacts.items;\n\nexport const getFilterValue = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;","import { nanoid } from 'nanoid'\nimport { Button, Form, Input, Label } from \"./ContactForm.styled\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport Notiflix from 'notiflix';\nimport { addContact } from 'redux/contacts/contactsOperation';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts)\n  const dispatch = useDispatch()\n\n  const nameId = nanoid(4)\n  const numberId = nanoid(4)\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    console.log(name, value)\n    switch(name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      reset();\n      return Notiflix.Notify.info(`${name} is already in contacts`);\n    }\n\n    dispatch(addContact({name, number}));\n    reset();\n  };\n\n  return (\n      <Form onSubmit={handleSubmit}>  \n        <Label htmlFor={nameId}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n            id={nameId}\n          />\n        </Label>  \n        <Label htmlFor={numberId}>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleChange}\n            id={numberId}\n          />            \n        </Label>\n        <Button>Add contact</Button>\n      </Form>\n    )\n}\n\nexport default ContactForm","import styled from \"styled-components\";\n\nexport const Button = styled.button`\nbackground-color: white;\nborder: 1px solid rgb(128, 128, 128, 0.5);\nborder-radius: 5px;\ncursor: pointer;\n:hover,\n:focus {\n  background-color: blue;\n  color: white;\n}\n`\n\nexport const ListItem = styled.li`\ndisplay: flex;\njustify-content: space-around;\nalign-items: center;\nwidth: 300px;\n\n:not(:last-of-type) {\n margin-bottom : 5px;\n}\n`\n\nexport const Icon = styled.span`\nwidth: 5px;\nheight: 5px;\nbackground-color: black;\nborder-radius: 50%;\n`","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Icon, ListItem } from \"./ContactList.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts, getFilterValue } from \"redux/contacts/selectors\";\nimport { fetchContacts, deleteContact } from '../../redux/contacts/contactsOperation';\nimport { useEffect } from \"react\";\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  console.log(contacts)\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  \n  const filterValue = useSelector(getFilterValue);\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue)\n  );\n\n  return (\n    <ul>\n      {visibleContacts.map(({id, name, number}) => {\n        return (\n          <ListItem key={id}>\n            <Icon></Icon>\n            <span>{name}:</span>\n            <span>{number}</span>\n            <Button\n              onClick={() => dispatch(deleteContact(id))}\n            >Delete</Button>\n          </ListItem>\n        )\n      })}\n    </ul>\n  )\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired\n  }))\n}\n\n\nexport default ContactList;","import styled from \"styled-components\";\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\n`\n\nexport const Input = styled.input`\nborder: 2px solid rgb(128, 128, 128, 0.5);\nmargin-top: 10px;\n`","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeValue } from 'redux/contacts/filterSlice';\nimport { getFilterValue } from 'redux/contacts/selectors';\nimport { Input, Label } from \"./Filter.styled\";\n\nconst Filter = () => {\n  const filterValue = useSelector(getFilterValue);\n\n  const dispatch = useDispatch();\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={filterValue} onChange={e => dispatch(changeValue(e.target.value))} />\n    </Label>\n  )\n}\n\nexport default Filter","import React from 'react';\nimport { MagnifyingGlass } from 'react-loader-spinner';\n\nconst MyLoader = props => (\n <MagnifyingGlass\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"MagnifyingGlass-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"MagnifyingGlass-wrapper\"\n  glassColor = '#c0efff'\n  color = '#e15b64'\n/>\n);\n\nexport default MyLoader;","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport MyLoader from 'components/Loader/Loader';\nimport { useSelector } from 'react-redux';\n\nconst styles = {\n  title: {\n    color: '#6a79a6',\n    marginBottom: 20,\n    textTransform: 'uppercase',\n    fontSize: 25,\n    textAlign: 'center',\n  },\n  subtitle: {\n    color: '#6a79a6',\n    marginBottom: 20,\n    textAlign: 'center',\n  },\n};\n\nexport default function Contacts() {\n  const { isLoading, error } = useSelector(state => state.contacts);\n  return (\n    <>\n      <h1 style={styles.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 style={styles.subtitle}>Contacts</h2>\n      <Filter />\n      {isLoading && <MyLoader />}\n      {error && <h2>An error: {error}</h2>}\n      <ContactList />\n    </>\n  );\n}"],"names":["Form","styled","Label","Input","Button","getContacts","state","contacts","items","getFilterValue","filter","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","nameId","nanoid","numberId","handleChange","e","currentTarget","value","console","log","reset","onSubmit","preventDefault","some","contact","toLowerCase","Notiflix","addContact","htmlFor","type","pattern","title","required","onChange","id","ListItem","Icon","useEffect","fetchContacts","filterValue","visibleContacts","includes","map","onClick","deleteContact","changeValue","target","props","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","styles","marginBottom","textTransform","fontSize","textAlign","subtitle","Contacts","isLoading","error","style"],"sourceRoot":""}